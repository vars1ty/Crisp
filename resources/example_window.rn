/// This function is called before `main` and is intended for
/// initializing layer shells, as they can't be safely initialized
/// inside of `main`.
/// You may not add any widgets from here, as there are no widgets
/// ready from this function.
pub fn on_ui_pre_init() {
    println("on_ui_pre_init called!");

    // Uncomment the lines below to have a status bar-like window.
    // LayerShell::init_layer_shell(true, "Top");
    // LayerShell::set_anchors(false, false, true, false);
}

/// Called as the UI is ready to be modified and can be populated.
/// The default widget is a vertical box widget named
/// `root`.
pub fn main() {
    GTK::set_window_title(Some("Example Window"));
    GTK::set_window_resizable(false);
    GTK::set_window_default_width(300);
    GTK::set_window_default_height(300);

    let example_struct = ExampleWindow { count: 0.0 };
    example_struct.init_window();

    // Background loops to register. Each loop function is fed the
    // example_struct variable automatically.
    // Format: (Function, RepeatMilliseconds)
    let background_loops = [(ExampleWindow::on_tick, 500)];

    // Register for events and loops. If you don't want any of this, return None.
    // on_enter_widget and on_exit_widget has to be in its own tuple.
    Some(new_runtime_config(example_struct, ExampleWindow::on_button_click, (ExampleWindow::on_enter_widget, ExampleWindow::on_exit_widget), background_loops))
}

/// An example structure we'll be using to store variables and
/// handle event callbacks.
struct ExampleWindow {
    count,
}

impl ExampleWindow {
    /// Called on window initialization, and adds all of the widgets.
    pub fn init_window(self) {
        let count = self.count;

        // We want the widgets on the left side, not at the center
        // which is the default.
        GTK::add_horizontal_box("Main Box", 5);
        GTK::set_focused_widget("Main Box");
        GTK::set_halign("Start");

        // Now add the label.
        GTK::add_label("Count", `${count}`);
    }

    /// Increments `self.count` every `500` milliseconds and
    /// updates the `Count` label text.
    pub fn on_tick(self) {
        self.count += 0.5;
        GTK::set_focused_widget("Count");

        let count = self.count;
        let count_i32 = std::ftoi(self.count);
        GTK::update_label_text(`Count (f32): ${count}, Count (i32): ${count_i32}`);
    }

    /// Called when a button has been pressed.
    pub fn on_button_click(self, identifier) { }

    /// Called when the cursor has entered a widget.
    pub fn on_enter_widget(self, identifier) { }

    /// Called when the cursor has exited a widget.
    pub fn on_exit_widget(self, identifier) { }
}
