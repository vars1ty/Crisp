pub fn main() {
    GTK::set_window_title(Some("Lightrod"));
    GTK::set_window_resizable(false);

    let lightrod = Lightrod {
        horizontal_box: "HBox",
        can_update_date: true,
        can_toggle_music_view: true,
    };

    Lightrod::add_widgets(lightrod);
    Some((Lightrod::on_tick, lightrod, Lightrod::on_button_click, Lightrod::on_enter_widget, Lightrod::on_exit_widget))
}

/// Setup the layer-shell in a centered layout.
pub fn on_ui_pre_init() {
    LayerShell::init_layer_shell(false);
    LayerShell::set_layer("Top");
    LayerShell::set_anchors(true, true, true, false);
}

/// The tick-rate for the status bar, in this case it's every
/// 150ms.
pub fn get_tick_rate() {
    150
}

pub struct Lightrod {
    /// Horizontal Box widget name.
    horizontal_box,

    /// If true, the date widget is allowed to be updated.
    /// If false, it's because the cursor is hovering over it.
    can_update_date,

    can_toggle_music_view,
}

impl Lightrod {
    pub fn on_tick(self) {
        let music = System::get_command_output("playerctl metadata --format '{{artist}} - {{title}}'").expect("Failed getting playerctl output!");
        let active_window = System::get_command_output("hyprctl activeworkspace -j | jq -r .lastwindowtitle").expect("Failed getting hyprctl output!");

        let is_empty = music.is_empty();
        GTK::set_focused_widget("Music");
        GTK::update_label_text(music);

        GTK::set_focused_widget("MusicBox");
        GTK::set_visible(!is_empty);
        GTK::set_focused_widget("MusicSeparator");
        GTK::set_visible(!is_empty);

        let is_empty = active_window.is_empty();
        GTK::set_focused_widget("Window");
        GTK::update_label_text(active_window);
        
        GTK::set_focused_widget("ActiveWindowBox");
        GTK::set_visible(!is_empty);

        GTK::set_focused_widget("ActiveWindowSeparator");
        GTK::set_visible(!is_empty);

        Lightrod::check_pacman(self);

        if !self.can_toggle_music_view {
            self.can_toggle_music_view = true;
        }

        if !self.can_update_date {
            return;
        }

        GTK::set_focused_widget("Date");
        let time = System::get_command_output("date +'%H:%M'").expect("Failed getting time!");
        GTK::update_label_text(`󰅒   ${time}`);
    }

    fn check_pacman(self) {
        let is_pacman_active = !System::get_command_output("pgrep pacman").expect("Failed getting pgrep output!").is_empty();
        GTK::set_focused_widget("PacmanBox");
        GTK::set_visible(is_pacman_active);
    }

    pub fn on_button_click(self, identifier) {}

    pub fn on_enter_widget(self, identifier) {
        if identifier == "MusicIcon" && self.can_toggle_music_view {
            GTK::set_focused_widget("Music");
            GTK::set_visible(!GTK::is_visible());
            self.can_toggle_music_view = false;
            return;
        }

        if identifier != "Date" {
            self.can_update_date = true;
            return;
        }

        GTK::set_focused_widget("Date");
        let date = System::get_command_output("date +'%a, %d'").expect("Failed getting date!");
        GTK::update_label_text(date);
        self.can_update_date = false;
    }

    pub fn on_exit_widget(self, identifier) {
        if identifier == "MusicIcon" && self.can_toggle_music_view {
            GTK::set_focused_widget("Music");
            GTK::set_visible(false);
            self.can_toggle_music_view = false;
            return;
        }

        if !self.can_update_date && identifier == "Date" {
            // We left the Date widget, allow updates.
            self.can_update_date = true;
        }
    }

    fn add_widgets(self) {
        let username = System::get_command_output("whoami").expect("Failed getting username!");
        let date = System::get_command_output("date +'%a, %d | %H:%M'").expect("Failed getting date and time!");
        GTK::add_horizontal_box(self.horizontal_box.clone(), 5);
        GTK::set_focused_widget(self.horizontal_box.clone());
        
        // Empty pixel gaps on each side of the bar.
        GTK::set_margin_start(5);
        GTK::set_margin_end(5);

        GTK::add_label("Username", `󰀄 ${username}`);
        Lightrod::add_separator(self, "UsernameSeparator");

        GTK::add_horizontal_box("ActiveWindowBox", 5);
        GTK::set_focused_widget("ActiveWindowBox");
        GTK::set_gtk_widget_name("ActiveWindowBox");
        GTK::add_label("WindowIcon", "󱂬");
        GTK::set_tooltip_text(Some("This is the currently focused window."));
        GTK::add_label("Window", "Updating...");
        GTK::set_focused_widget(self.horizontal_box.clone());

        Lightrod::add_separator(self, "ActiveWindowSeparator");

        GTK::add_horizontal_box("PacmanBox", 5);
        GTK::set_focused_widget("PacmanBox");
        GTK::set_gtk_widget_name("PacmanBox");
        GTK::add_label("PacmanIcon", "󰚰");
        GTK::add_label("Pacman", "Pacman is active!");
        GTK::set_tooltip_text(Some("Pacman is currently active."));
        GTK::set_visible(false);
        GTK::set_focused_widget(self.horizontal_box.clone());
        
        Lightrod::add_separator(self, "PacmanSeparator");

        GTK::add_horizontal_box("MusicBox", 5);
        GTK::set_focused_widget("MusicBox");
        GTK::set_gtk_widget_name("MusicBox");
        GTK::add_label("MusicIcon", "󰋎");
        GTK::set_tooltip_text(Some("Currently playing media."));
        GTK::add_label("Music", "Updating...");
        GTK::set_focused_widget(self.horizontal_box.clone());

        Lightrod::add_separator(self, "MusicSeparator");

        GTK::add_label("Date", `󰅒 ${date}`);
    }

    fn update_components(self) {
        println("TODO");
    }

    /// Adds a new "separator", aka a 1-pixel wide box.
    fn add_separator(self, name) {
        GTK::add_horizontal_box(name.clone(), 0);
        GTK::set_focused_widget(name.clone());
        GTK::set_gtk_widget_name(name);
        GTK::set_size_request(1, 0);
        GTK::set_focused_widget(self.horizontal_box.clone());
    }
}
